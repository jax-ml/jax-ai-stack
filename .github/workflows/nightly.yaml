name: Nightly Tests

on:
  schedule:
    - cron: "0 12 * * *" # Daily at 12:00 UTC
  workflow_dispatch: # allows triggering the workflow run manually
  pull_request:  # Automatically trigger on pull requests affecting this file
    branches:
      - main
    paths:
      - '**workflows/nightly.yaml'


jobs:
  new-releases:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write  # for upload-artifact
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
    outputs:
      artifacts_availability: ${{ steps.status.outputs.ARTIFACTS_AVAILABLE }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # ratchet:actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f # ratchet:actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install test requirements
        run: |
          pip install pytest-reportlog
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U jax flax grain ml_dtypes optax orbax tensorflow tensorflow_datasets pytest pytest-xdist
      - name: Run tests
        if: success()
        id: status
        run: |
          pytest -n auto --tb=short -rf --maxfail=20 \
          --report-log output-${{ matrix.python-version }}-log.jsonl \
          jax_ai_stack \
          || (
            echo 'ARTIFACTS_AVAILABLE=true' >> $GITHUB_OUTPUT && false
          )
      - name: Upload artifacts
        if: |
          failure()
          && github.event.pull_request == null
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # ratchet: actions/upload-artifact@v4
        with:
          name: output-${{ matrix.python-version }}-log.jsonl
          path: output-${{ matrix.python-version }}-log.jsonl
          retention-days: 5

  report:
    name: report
    needs: new-releases
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    if: |
      failure()
      && github.event.pull_request == null
      && needs.new-releases.outputs.artifacts_availability == 'true'
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # ratchet:actions/checkout@v4
      - uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f # ratchet:actions/setup-python@v5
        with:
          python-version: "3.x"
      - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # ratchet:actions/download-artifact@v4
        with:
          path: /tmp/workspace/logs
      - name: install requirements
        run: |
          python -m pip install pytest
      - name: Move all log files into a single directory
        run: |
          rsync -a /tmp/workspace/logs/output-*/ ./logs
          ls -R ./logs
          cat logs/*.jsonl > pytest-logs.txt
          python .github/workflows/parse_logs.py pytest-logs.txt --outfile=parsed-logs.txt
      - name: Report failures
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # ratchet:actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const parsed_logs = fs.readFileSync('parsed-logs.txt', 'utf8');
            const title = "⚠️ Nightly new-releases CI failed ⚠️"
            const workflow_url = `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`
            const issue_body = `[Workflow Run URL](${workflow_url})\n${parsed_logs}`
            // Run GraphQL query against GitHub API to find the most recent open issue used for reporting failures
            const query = `query($owner:String!, $name:String!, $creator:String!, $label:String!){
              repository(owner: $owner, name: $name) {
                issues(first: 1, states: OPEN, filterBy: {createdBy: $creator, labels: [$label]}, orderBy: {field: CREATED_AT, direction: DESC}) {
                  edges {
                    node {
                      body
                      id
                      number
                    }
                  }
                }
              }
            }`;
            const variables = {
                owner: context.repo.owner,
                name: context.repo.repo,
                label: 'CI',
                creator: "github-actions[bot]"
            }
            const result = await github.graphql(query, variables)
            // If no issue is open, create a new issue,
            // else update the body of the existing issue.
            if (result.repository.issues.edges.length === 0) {
                github.rest.issues.create({
                    owner: variables.owner,
                    repo: variables.name,
                    body: issue_body,
                    title: title,
                    labels: [variables.label]
                })
            } else {
                github.rest.issues.update({
                    owner: variables.owner,
                    repo: variables.name,
                    issue_number: result.repository.issues.edges[0].node.number,
                    body: issue_body
                })
            }
